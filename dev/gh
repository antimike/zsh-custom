#!/bin/zsh -f
# Queries the Github API to retrieve repository metadata
# Returns raw JSON

. $ZSH_CUSTOM/lib/io_format.zsh
autoload docstring json_build_url needs jfrom jadd
local __FILE__=${(%):-%x}

# Personal `pass` extension
# Ensures that GH credentials are available as env variables
eval $(pass env -q)

local -a curl_opts=(
    --silent
    -H 'Accept: application/vnd.github.preview'
    -w "%{stderr}%{http_code}"
)
if [[ -n "$GITHUB_USER" && -n "$GITHUB_TOKEN" ]]; then
    curl_opts+=( -u "${GITHUB_USER}:${GH_TOKEN}" )
else
    warn "Github token not found; using unauthenticated Github API" >&2
fi

local -A URLS=(
    [base]="https://github.com"
    [api]="https://api.github.com/repos"
    [raw]="https://raw.githubusercontent.com"
)

local -a exts=(md mkd markdown rst)

local -A fields=(
    [stars]="stargazers_count"
)

local -a comments=() tags=() srcs=() yml_srcs=() attrs=()
local cmd= outfile=/dev/null
local -i verbosity=1 http_ret
local -A errors=( )
trap 'print -aC 2 -- ${(kv)errors} >&2' EXIT

gh_test() {
    declare -p comments
    declare -p tags
    declare -p verbosity
}

gh_api_request() {
    debug $(declare -p outfile)
    http_ret="$( {curl $curl_opts $1 | tee -a $outfile; } 2>&1 1>&3 3>&- )" 3>&1
    debug "HTTP request to $url returned status $http_ret"
    if [[ $http_ret -lt 200 || $http_ret -gt 299 ]]; then
        errors["$1"]=$http_ret
    fi
}

gh_process_json() {
    yq '
        to_entries |
            reduce .[] as $kv ([{},{}]; if ($kv|key|test("url")) then [.[0], .[1]+$kv] else [.[0]+$kv, .[1]] end) |
            map(from_entries) | .[0]+{"urls":.[1]}+$other_attrs
                    ' --argjson other_attrs $(jfrom -n comments tags | jadd attrs)
}

gh_metadata() {
    local stem url
    while [[ $# -gt 0 ]]; do
        debug "Getting metadata for $1..."
        stem="${1#${URLS[base]}/}"
        url="${URLS[api]}/${stem}"
        gh_api_request $url
        shift
    done
}

gh_readme() {
    local url
    if [[ ! -t 0 ]]; then   # Process stdin as JSON
        debug "Processing stdin as JSON/YAML..."
        url=$(json_build_url -p $URLS[raw] -s README.md owner.login name default_branch)
    else
        debug "Obtaining metadata"
        url=$(gh_metadata $@ | json_build_url -p $URLS[raw] -s README.md owner.login name default_branch)
    fi
    debug "Constructed request URL: $url"
    gh_api_request $url
}

local cmd=${1:-metadata}
if [[ -z ${cmd::=${${$(grep -m1 -so "^gh_${cmd}.*()" $__FILE__)%\(\)}#gh_}} ]]
then
    fail "gh subcommand '$1' not implemented"
fi
shift
debug "Executing gh command '$cmd'..."
fields[timestamps]="{(now|todate):\"${cmd} $@\"}"
debug $(typeset -p cmd)

eval set -- $(getopt -o "c:t:a:yjY:J:F:hvVqso:" -l "comment:,tag:,attr:,yaml,json,from-json:,from-file:,help,quiet,silent,outfile:" -- $@)
while [[ $# -gt 0 ]]; do
    case $1 in
        -c|--comment) comments+=( "$2" ); shift ;;
        -t|--tag) tags+=( "$2" ); shift ;;
        -a|--attr) attrs+=( "$2" ); shift ;;
        -y|--yaml) yq_opts+=( -Y ) ;;
        -j|--json) yq_opts=( ${yq_opts#-Y} ) ;;
        -J|--from-json) yml_src+=( "$2" ); shift ;;
        -F|--from-file) src+=( "$2" ); shift ;;
        -h|--help) docstring; return 0 ;;
        -v) let verbosity+=1 ;;
        -V) let verbosity-=1 ;;
        -q|--quiet) let verbosity=0 ;;
        -s|--silent) let verbosity=-1 ;;
        -o|--outfile) outfile="$2"; shift ;;
        --) shift; break ;;
        *) fail "Unknown option '$1'" ;;
    esac
    shift
done

gh_$cmd $@
return $#errors
